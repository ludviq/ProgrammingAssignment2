filter(Rodzaj.paliwa=="olej napedowy (diesel)" | Rodzaj.paliwa=="benzyna" |Rodzaj.paliwa=="benzyna+LPG") %>%
filter( Kolor=="czarny" | Kolor=="bialy" | Kolor=="czerwony" | Rodzaj.paliwa=="olej napedowy (diesel)" | Rodzaj.paliwa=="benzyna" |Rodzaj.paliwa=="benzyna+LPG")
auta
View(auta)
View(auta)
auta <- auta2012 %>%
filter( Kolor=="czarny" | Kolor=="bialy" | Kolor=="czerwony" | Rodzaj.paliwa=="olej napedowy (diesel)" | Rodzaj.paliwa=="benzyna" |Rodzaj.paliwa=="benzyna+LPG")
auta <- auta2012 %>%
filter( Kolor=="czarny" | Kolor=="bialy" | Kolor=="czerwony" | Rodzaj.paliwa=="olej napedowy (diesel)" | Rodzaj.paliwa=="benzyna" |Rodzaj.paliwa=="benzyna+LPG") %>%
filter( Kolor=="czarny" | Kolor=="bialy" | Kolor=="czerwony" | Rodzaj.paliwa=="olej napedowy (diesel)" | Rodzaj.paliwa=="benzyna" |Rodzaj.paliwa=="benzyna+LPG")
View(auta)
subset(auta2012,Kolor %in% c("bialy","czarny","czerwony"))
auta <- subset(auta2012,Kolor %in% c("bialy","czarny","czerwony"))
head(auta)
View(auta)
autapaliwo <- subset(auta,Rodzaj.paliwa %in% c("olej napedowy (diesel)","benzyna","benzyna+LPG"))
View(autapaliwo)
autapaliwo <- subset(auta,Rodzaj.paliwa %in% c("olej napedowy (diesel)","benzyna","benzyna+LPG"))
table(autapaliwo$Kolor,autapaliwo$Rodzaj.paliwa)
table(droplevels(autapaliwo$Kolor),autapaliwo$Rodzaj.paliwa)
table(droplevels(autapaliwo$Kolor),droplevels(autapaliwo$Rodzaj.paliwa)
)
tabelka <-table(droplevels(autapaliwo$Kolor),droplevels(autapaliwo$Rodzaj.paliwa))
mosaicplot(tabelka)
chisq.test(tabelka)
mosaicplot(tabelka,main="kolor samochodu a rodzaj paliwa")
chitest <- chisq.test(tabelka)
chitest[1]
chitest[2]
chitest[3]
chitest[4]
wynik <-signif(chitest[[3]],3)
wynik
tabelka <-table(droplevels(autapaliwo$Rodzaj.paliwa),droplevels(autapaliwo$Kolor))
tabelka
proptable(tabeka,1)
prop.table(tabelka,1)
wynik <prop.table(tabelka,100)
wynik <- prop.table(tabelka,100)
wynik <- prop.table(tabelka,1)*100
wynik
demo()
clear
x <-1
print(x)
x
msg <- "hello"
msg
x<-msg
x
x<-##
d
x
x <- ##eloelo
1
x
x <- 1:20
x
vector(int,2)
vector(integer,2)
vector(integer,{2})
x <-c(3,4)
x
x <-c(true,true)
x <-c(TRUE,TRUE)
x
x <-c(T,F)
x
x<-1.2:23
x
x<-c(1+0i,2+4i)
x
y <-(1.3,"a")
a <- aviabile.packages()
a <- avaibile.packages()
a <- available.packages()
head(rownames(a),10)
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install_github("slidify", "ramnathv")
install.packages("slidify")
setRepositories()
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLitte(c("GenomicFeatures","AnnotationDbi"))
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
info
info()
version
find.package("devtools")
find_rtools()
find_rtools()
find.rtools()
library("devtools")
find_rtools()
packages.install("KernSmooth")
install.packages("KernSmooth")
load(KernSmith)
library(KernSmith)
install.packages("KernSmooth")
library(KernSmooth)
swirl()
swirl
library("swirl")
swirl()
x
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(2,5,7)]
x[c(3,5,7)]
x
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-c(foo=10,bar=2,norf=NA)
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
idencial(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<- c(1:20)
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
;
matrix(my_matrix)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames,my_data)
colnames(my_data,cnames)
?colnames
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FALSE
TRUE& c(TRUE,FALSE,FALSE)
TRUE &&c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
play()
isTRUE(3)
isTRUE(NA)
isTRUE(!TRUE)
nxt()
identical('twins,'twins)
identical('twins,'twins'')
identical('twins,'twins')
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
source('~/AppData/Local/Temp/RtmpOejsLQ/boring_function.R')
submit(0)
submit()
submit(x)
source('~/AppData/Local/Temp/RtmpOejsLQ/boring_function.R')
source('~/AppData/Local/Temp/RtmpOejsLQ/boring_function.R')
submit(x)
submit()
boring_function("My first function")
boring_function("My first function!")
mean
boring_function
submit()
my_mean(c(4,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
reaminder(11,5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(median,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programing","is","fun!")
paste("Programming","is","fun!")
source('~/AppData/Local/Temp/RtmpOejsLQ/telegram.R')
submit(0)
submit()
telegram("Hello World")
source('~/AppData/Local/Temp/RtmpOejsLQ/mad_libs.R')
submit()
mad_libs(place="Falenica",adjective="sleep",noun="car")
source('~/AppData/Local/Temp/RtmpOejsLQ/bin_op.R')
submit()
source('~/AppData/Local/Temp/RtmpOejsLQ/bin_op.R')
submit()
source('~/AppData/Local/Temp/RtmpOejsLQ/bin_op.R')
submit()
source('~/AppData/Local/Temp/RtmpOejsLQ/bin_op.R')
submit()
source('~/AppData/Local/Temp/RtmpOejsLQ/bin_op.R')
submit()
"I"%p%"love"%p%"R!"
lapply
x <-list(a=1:5, b=rnom(10))
x <-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
?runif
x<-1:4
x
lapply(x,runif)
lapply(x,runif, min=9,max=10)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
x <- list(a =
1
:
4
, b = rnorm(
10
), c = rnorm(
20
,
1
), d = rnorm(
100
,
5
))
x
lapply(x,mean)
sapply(x, mean)
mean(x)
str(apply)
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,mean)
rowSums=apply(x,1,sum)
rowSum
rowSums
rowSums
rowMeans
colMean
colMeans
str(mapply)
mapply(rep,1:4,4:1)
setwd("~/R/Assigment2")
mean(x)
mean(xx)
traceback()
lm(a-b)
traceback()
lm(a~b)
treaceback()
traceback()
lm(a~b)
traceback()
debug(lm)
lm(y~x)
traceback()
options(error=recover)
read.csv("nosuchfile")
getwd()
x
traceback(x)
x
traceback()
?numeric
x=muneric()
x=numeric()
x
is.numeric(x)
x<<y
x<<-y
?function
;
? function
;
get <- function() x
get
get 4
get(4)
get
function() x
?get
?function
()
;
?set
??set
set
get
set=set
get=get
get<-function() y
get=get
setmean <-fnction(mean) m <<-mean
setmean <-function(mean) m <<-mean
set
setmean
setmean 2
setmean(2)
setmean(2)
setmean(3)
get
get(x)
x<<1
x<<-1
get
get <-function() x
get
get()
x=5
get()
list(set=set)
list(get=get)
setmean
list(get=get,setmean=setmean)
x<-c(1,5)
x<-mean
x
x()
1$mean
x
x<-1:5
x$mean
x$mean()
mean(x)
x$mean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m<-1$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheman
cacheman(1)
cachemean(1)
cachemean(1:5)
cachemean(1)
x<-makeVector(3)
x
cachemean(x)
x<-makeVector(1:10)
x$get
x$get()
x$getmean()
x$setmean(2)
x$getmean()
x$set(1:10)
x$get
x$get()
x$set(1:15)
x$get()
x$getmean()
cachemean(x)
x$getmean()
is.null(m)
cachemean(x)
matrix(1:4,2)
matrix(1:8,2)
solve(matrix(1:8,2))
solve(matrix(1:4,2))
matrix(1:4,2)
dir
setwd("~/R/Assigment2/ProgrammingAssignment2")
dir
ls
dir()
ls()
use(cachematrix.R)
source(cachematrix.R)
getwd()
dir
dir()
source("cachematrix.R")
x<-makeCacheMatrix(matrix(1:4,2))
x<-makeCacheMatrix(Matrix(1:4,2))
x<-makeCacheMatrix(Matrix(1:4,2))
x<-makeCacheMatrix(Matrix(1:4,2))
matrix(NULL)
matrix(, nrow = 15, ncol = 0)
matrix(, nrow = 1, ncol = 1)
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(Matrix(1:4,2))
x
x$get
x$get()
s <- matrix(, nrow = 1, ncol = 1)
s
x$get()
page(x$get())
s
s<<-matrix(, nrow = 1, ncol = 1)
s
x
x$get()
x$getSolve()
x$setSolve()
x$setSolve(2)
x$setSolve(2)
x<-makeCacheMatrix(Matrix(1:4,2))
x
x$getSolve
x$getSolve()
matrix(NULL)
x$setSolve(Matrix(1:4,2))
x$get
x$get()
x$get()
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(matrix(1:4,2))
x$get()
x$getSolve()
x$setSolve(matrix(4:8,2))
x$setSolve(matrix(4:7,2))
x$getSolve()
x$set(matrix(4:7,2))
x$get()
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
git add .
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
all.equal(matrix(1:4,2),matrix(1:4,2))
all.equal(matrix(1:4,2),matrix(2:5,2))
identical(matrix(1:4,2),matrix(2:5,2))
identical(matrix(1:4,2),matrix(1:4,2))
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
identical(s,matrix(, nrow = 1, ncol = 1)
)
s<- x$getSolve()
s
!identical(s,matrix(, nrow = 1, ncol = 1) )
x$get()
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x$getSolve
x$getSolve()
cacheSolve(x)
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
source('~/R/Assigment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
